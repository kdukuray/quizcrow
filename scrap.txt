     {/* Search + Filters */}
        <div className="bg-gray-50 p-6 rounded-xl shadow mb-10 border-2 w-2xl h-72 flex flex-col">
          <div className="flex flex-col md:flex-row md:items-center md:space-x-4 space-y-4 md:space-y-0">
            {/* Search Bar */}
            <div className="flex flex-1">
              <Input
                placeholder="Search quizzes..."
                className="rounded-r-none"
              />
              <button className="w-24 bg-blue-600 text-white rounded-r-lg hover:bg-blue-700 transition">
                Search
              </button>
            </div>
          </div>

          {/* Filters */}
          <div className="flex flex-col md:grid-cols-4 gap-4 mt-6 fe">
            <select className="border rounded-lg px-3 py-2">
              <option>School</option>
              <option>CCNY</option>
              <option>NYU</option>
              <option>Columbia</option>
            </select>

            <select className="border rounded-lg px-3 py-2">
              <option>Year Range</option>
              <option>2020 - 2022</option>
              <option>2017 - 2019</option>
              <option>2014 - 2016</option>
            </select>

            <Input placeholder="Course Code (e.g. CSC 101)" />

            <Input placeholder="Professor" />
          </div>
        </div> 


------
import Link from "next/link";
export default function Home() {
  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-blue-100 flex flex-col items-center px-6 pt-32">
      {/* Hero Section */}
      <div className="text-center max-w-2xl">
        <h3 className="text-7xl md:text-6xl font-bold text-gray-900 mb-10">
          Welcome to{" "}
          <span className="text-blue-600">
            QuizCrow
          </span>
        </h3>

        <p className="text-lg mb-4">
          QuizCrow is a website for students and learners to access, share, and
          explore past <span className="text-blue-600 font-bold">exam questions.</span> Whether you’re preparing for finals or
          just brushing up on topics, you’ll find valuable resources here.
        </p>

        <p className="text-lg font-medium">
          Together, we can
          help each other <span className="text-blue-600 font-bold">learn smarter</span>, not harder.
        </p>
      </div>

      {/* Call to Action */}
      <div className="mt-10 flex space-x-4">
        <Link href="/browse" className="bg-blue-600 text-white px-6 py-3 rounded-xl shadow hover:bg-blue-700 transition">
          Browse Questions
        </Link>
        <button className="bg-white border border-blue-600 text-blue-600 px-6 py-3 rounded-xl shadow hover:bg-blue-50 transition">
          Request a Quiz
        </button>
      </div>
    </div>
  );
}


------
"use client";

import { useMemo } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";

const FiltersSchema = z
  .object({
    school: z.string().trim().optional(),
    subject: z.string().trim().optional(),
    courseCode: z.string().trim().optional(),
    professor: z.string().trim().optional(),
    yearStart: z.string().optional(),
    yearEnd: z.string().optional(),
  })
  .refine(
    (v) => {
      if (!v.yearStart || !v.yearEnd) return true;
      const s = +v.yearStart,
        e = +v.yearEnd;
      return !Number.isNaN(s) && !Number.isNaN(e) && s <= e;
    },
    { message: "Start year must be ≤ end year", path: ["yearEnd"] }
  );

type Filters = z.infer<typeof FiltersSchema>;

export default function BrowseQuizFilter({
  onApply,
  defaultValues,
}: {
  onApply?: (filters: Filters) => void;
  defaultValues?: Partial<Filters>;
}) {
  const currentYear = new Date().getFullYear();
  const years = useMemo(
    () =>
      Array.from({ length: currentYear - 2000 + 1 }, (_, i) =>
        String(currentYear - i)
      ),
    [currentYear]
  );

  const form = useForm<Filters>({
    resolver: zodResolver(FiltersSchema),
    defaultValues: {
      school: "",
      subject: "",
      courseCode: "",
      professor: "",
      yearStart: "",
      yearEnd: "",
      ...defaultValues,
    },
    mode: "onChange",
  });

  const submit = (vals: Filters) => onApply?.(vals);

  const reset = () => {
    const cleared: Filters = {
      school: "",
      subject: "",
      courseCode: "",
      professor: "",
      yearStart: "",
      yearEnd: "",
    };
    form.reset(cleared);
    onApply?.(cleared);
  };

  return (
    <aside
      className="
        bg-white/80 backdrop-blur-sm border rounded-2xl shadow-sm
        w-full max-w-2xl    /* 👈 slightly wider */
        p-6
      "
    >
      <h2 className="text-base font-semibold mb-4">Filter results</h2>

      <Form {...form}>
        <form
          onSubmit={form.handleSubmit(submit)}
          className="grid grid-cols-1 gap-4"
        >
          {/* grid with 2 cols per row */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="school"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-sm">School</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="subject"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-sm">Subject</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                </FormItem>
              )}
            />
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="courseCode"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-sm">Course Code</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="professor"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-sm">Professor</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                </FormItem>
              )}
            />
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="yearStart"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-sm">Year Start</FormLabel>
                  <FormControl>
                    <select
                      className="w-full border rounded-md px-2 py-2"
                      {...field}
                    >
                      <option value="">Any</option>
                      {years.map((y) => (
                        <option key={`ys-${y}`} value={y}>
                          {y}
                        </option>
                      ))}
                    </select>
                  </FormControl>
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="yearEnd"
              render={({ field }) => {
                const start = form.watch("yearStart");
                const filtered = start
                  ? years.filter((y) => +y >= +start)
                  : years;
                return (
                  <FormItem>
                    <FormLabel className="text-sm">Year End</FormLabel>
                    <FormControl>
                      <select
                        className="w-full border rounded-md px-2 py-2"
                        {...field}
                      >
                        <option value="">Any</option>
                        {filtered.map((y) => (
                          <option key={`ye-${y}`} value={y}>
                            {y}
                          </option>
                        ))}
                      </select>
                    </FormControl>
                  </FormItem>
                );
              }}
            />
          </div>

          {/* Actions */}
          <div className="flex flex-col gap-2 pt-2">
            <button
              type="submit"
              className="w-full px-4 py-2 text-sm rounded-md bg-blue-600 text-white hover:bg-blue-700 transition"
            >
              Apply
            </button>
            <button
              type="button"
              onClick={reset}
              className="w-full px-4 py-2 text-sm rounded-md border hover:bg-gray-50"
            >
              Reset
            </button>
          </div>
        </form>
      </Form>
    </aside>
  );
}
------
 <Label>Files (PDF or images)</Label>
                            <Label
                                htmlFor="filepick"
                                onDrop={onDrop}
                                onDragOver={(e) => e.preventDefault()}
                                className="border-2 border-dashed border-gray-300 rounded-2xl p-8 bg-white/60 flex flex-col items-center justify-center text-center cursor-pointer hover:border-blue-400 hover:bg-blue-50/50 transition"
                            >
                                <Upload className="h-8 w-8 mb-2" />
                                <p className="font-medium">Drag & drop files here</p>
                                <p className="text-sm text-gray-600">or click to browse</p>
                                <Input id="filepick" type="file" multiple accept=".pdf,image/*" className="hidden" onChange={onPick} />
                            </Label>

                            <Label>Files (PDF or images)</Label>
                            <Label
                                htmlFor="filepick"
                                onDrop={onDrop}
                                onDragOver={(e) => e.preventDefault()}
                                className="border-2 border-dashed border-gray-300 rounded-2xl p-8 bg-white/60 flex flex-col items-center justify-center text-center cursor-pointer hover:border-blue-400 hover:bg-blue-50/50 transition"
                            >
                                <Upload className="h-8 w-8 mb-2" />
                                <p className="font-medium">Drag & drop files here</p>
                                <p className="text-sm text-gray-600">or click to browse</p>
                                <Input id="filepick" type="file" multiple accept=".pdf,image/*" className="hidden" onChange={onPick} />
                            </Label>

------
<Card>
              <CardHeader>
                <CardTitle>Recent uploads</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {RECENT_UPLOADS.map((u) => (
                  <div key={u.id} className="rounded-xl border bg-white p-3">
                    <div className="flex items-center justify-between">
                      <p className="font-medium truncate">{u.title}</p>
                      <Badge variant={u.status === "Approved" ? "default" : "secondary"}>{u.status}</Badge>
                    </div>
                    <div className="flex gap-3 text-xs text-gray-600 mt-1">
                      <span>{u.course}</span>
                      <span>• {u.school}</span>
                      <span>• {u.files} file{u.files > 1 ? "s" : ""}</span>
                    </div>
                  </div>
                ))}
                <Button variant="outline" className="w-full mt-1"><Plus className="h-4 w-4 mr-1"/>View all</Button>
              </CardContent>
            </Card>

------// Simple status badge component
function StatusBadge({ status }: { status: "open" | "in_progress" | "fulfilled" }) {
  const map: Record<string, string> = {
    open: "bg-blue-50 text-blue-700 border-blue-200",
    in_progress: "bg-amber-50 text-amber-700 border-amber-200",
    fulfilled: "bg-emerald-50 text-emerald-700 border-emerald-200",
  };
  const label: Record<string, string> = {
    open: "Open",
    in_progress: "In progress",
    fulfilled: "Fulfilled",
  };
  return (
    <span className={`inline-flex items-center gap-1 rounded-full border px-2.5 py-1 text-xs font-medium ${map[status]}`}>
      <span className="size-1.5 rounded-full bg-current opacity-60" /> {label[status]}
    </span>
  );
}


---- a
add details page for requests
add descriotions to quizRequests

--------------------------------

from browse, you build a url with search params and send them to the results page with the proper search params
in the results page, you use search params to fetch the relevant results 
if on the results page already with results, the user enters a new filter then... (should i chnage build up new search aparams and redirect them to the same page with the updated search params closing the loop, or should i stay on the same page, fetching the mew data and updating the results. if i choose option 2, should i try to reflect the update in the url or just leave it?)



   {/* Success / Info Banner
        {submitted && (
          <Card className="border-emerald-200 bg-emerald-50/60">
            <CardContent className="py-4 flex items-start gap-3">
              <CheckCircle2 className="h-5 w-5 text-emerald-600 mt-0.5" />
              <div>
                <p className="font-medium text-emerald-900">Pretend submit successful!</p>
                <p className="text-emerald-800/80 text-sm">“{submitted.title}” would be queued for review. (This is just a demo state.)</p>
              </div>
            </CardContent>
          </Card>
        )} */}


import { Upload, FileText, Trash2, Plus, CheckCircle2, AlertCircle, School, BookOpen, User, CalendarClock, Tags } from "lucide-react";



// upload the pdf file
        if (quizFile) {
            const uploadedFile = await client.storage.from("quizData").upload(`quizPdfs/${uuidv4()}.pdf`, quizFile, {
                cacheControl: "3600",
                upsert: false
            })
            // if there was an error, log it
            if (uploadedFile.error) {
                console.log(uploadedFile.error)
                console.log("There was an error trying to upload the pdf to the storage bucket.")
            }
            // if there was no error, get the link of the uploaded file
            else {
                if (uploadedFile.data) {
                    const upladedFileData = uploadedFile.data as fileData
                    uploadedFilePath = upladedFileData.path
                    console.log(`The file was uploaded successfully at path ${uploadedFilePath}`)
                }
            }
        }
        let quizDataPublicUrl: string | undefined = undefined

        if (uploadedFilePath) {
            const result = await client.storage.from("quizData").getPublicUrl(uploadedFilePath)
            if (result && result.data) {
                quizDataPublicUrl = result.data.publicUrl
            }
        }


         {/* <label className="text-xs text-gray-600">Year</label>
                <select
                  className="w-full border rounded-md px-3 py-2"

                >
                  <option value="">Any</option>
                  {Array.from({ length: 26 }, (_, i) => String(2025 - i)).map((y) => (
                    <option key={`year-${y}`} value={y}>
                      {y}
                    </option>
                  ))}
                </select> */}

----
"use client";

export default function FAQPage() {
  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-blue-100 px-6 py-10 pt-32">
      <div className="max-w-4xl mx-auto space-y-10">
        {/* Header */}
        <div className="text-center">
          <h1 className="text-4xl font-bold text-gray-900 mb-3">FAQ & About QuizCrow</h1>
          <p className="text-lg text-gray-700">
            Learn more about what QuizCrow is and how it works.
          </p>
        </div>

        {/* About Section */}
        <section className="bg-white border rounded-xl shadow-sm p-6 space-y-4">
          <h2 className="text-2xl font-semibold text-gray-900">About QuizCrow</h2>
          <p className="text-gray-700 leading-relaxed">
            QuizCrow is a community-driven platform that provides students with access
            to past quizzes, exams, and study materials. Our goal is to help students
            better prepare for upcoming exams by learning from real past papers shared
            by fellow students.
          </p>
          <p className="text-gray-700 leading-relaxed">
            We fully support and respect academic integrity. QuizCrow is not about
            cheating—it’s about providing students with a reliable study resource. By
            reviewing past papers, students can understand the style of questions,
            identify important topics, and practice effectively, all while upholding
            academic honesty.
          </p>
          <p className="text-gray-700 leading-relaxed">
            Because QuizCrow is <strong>crowdsourced</strong>, anyone can contribute by
            uploading past papers they have access to, so long as they follow fair use
            and integrity guidelines. The platform is designed for students to come
            together, collaborate, and support one another in their learning journey.
          </p>
        </section>

        {/* FAQ Section */}
        <section className="space-y-6">
          <h2 className="text-2xl font-semibold text-gray-900">Frequently Asked Questions</h2>
          <div className="space-y-4">
            <div className="bg-white border rounded-lg p-5 shadow-sm">
              <h3 className="text-lg font-medium text-gray-900">Is using QuizCrow considered cheating?</h3>
              <p className="text-gray-700 mt-2">
                No. QuizCrow exists to support academic integrity. It’s meant to be a
                study aid, helping students prepare for exams by reviewing past papers
                and understanding the types of questions that may appear. We encourage
                responsible use in line with your institution’s policies.
              </p>
            </div>

            <div className="bg-white border rounded-lg p-5 shadow-sm">
              <h3 className="text-lg font-medium text-gray-900">Where do the quizzes and exams come from?</h3>
              <p className="text-gray-700 mt-2">
                All content on QuizCrow is <strong>crowdsourced</strong>—students and
                community members upload past quizzes and exams to share with others.
                Together, we’re building a shared library of study materials.
              </p>
            </div>

            <div className="bg-white border rounded-lg p-5 shadow-sm">
              <h3 className="text-lg font-medium text-gray-900">Do I have to pay to access quizzes?</h3>
              <p className="text-gray-700 mt-2">
                No. QuizCrow is a free resource built by students for students. Our
                mission is to make study materials accessible to everyone, regardless
                of financial background.
              </p>
            </div>

            <div className="bg-white border rounded-lg p-5 shadow-sm">
              <h3 className="text-lg font-medium text-gray-900">Can I contribute to QuizCrow?</h3>
              <p className="text-gray-700 mt-2">
                Absolutely! We encourage students to upload quizzes, exams, or study
                notes they have access to (while respecting academic integrity). Your
                contributions help grow the library and support other students.
              </p>
              <p className="text-gray-700 mt-2">
                QuizCrow is also <strong>open source</strong>, so if you’re a developer,
                designer, or contributor, you can help improve the platform directly on
                <a href="https://github.com/" target="_blank" rel="noreferrer" className="text-blue-600 hover:underline"> GitHub</a>.
              </p>
            </div>

            <div className="bg-white border rounded-lg p-5 shadow-sm">
              <h3 className="text-lg font-medium text-gray-900">How do I get started?</h3>
              <p className="text-gray-700 mt-2">
                Just browse the available quizzes, use the filters to find what you
                need, and click on a result to view details. You can also make a request
                if the quiz you need isn’t listed.
              </p>
            </div>
          </div>
        </section>
      </div>
    </div>
  );
}
----
details.page
"use client";

export default function QuizPage() {
  const dummyQuiz = {
    title: "Intro to Computer Science – Midterm Quiz",
    courseCode: "CS101",
    professor: "Dr. Jane Doe",
    school: "City College of New York",
    term: "Fall 2024",
    year: 2024,
    tags: ["Algorithms", "Basics", "Multiple Choice"],
    pdfLink: "https://example.com/sample.pdf",
    description: "This quiz covers fundamental concepts in computer science, including algorithms, data structures, and problem-solving basics.",
    createdAt: "2024-10-01T10:00:00Z",
  };

  return (
    <div className="min-h-dvh w-full px-4 sm:px-6 lg:px-8 py-6 bg-gradient-to-b from-blue-50 to-blue-100 pt-28">
      {/* Header */}
      <div className="mb-4">
        <nav className="text-sm text-gray-500 flex items-center gap-2">
          <a href="/" className="hover:underline">Home</a>
          <span>/</span>
          <a href="/browse" className="hover:underline">Browse</a>
          <span>/</span>
          <a href="/" className="hover:underline">Results</a>
          <span>/</span>
          <span className="text-gray-700 font-medium">{dummyQuiz.title}</span>
        </nav>
      </div>

      {/* Title + actions */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-3 mb-4">
        <h1 className="text-2xl md:text-3xl font-semibold tracking-tight">
          {dummyQuiz.title}
        </h1>
        <div className="flex items-center gap-2">
          <a
            href={dummyQuiz.pdfLink}
            target="_blank"
            rel="noreferrer"
            className="inline-flex items-center gap-2 rounded-xl border px-3 py-2 text-sm hover:bg-gray-50"
          >
            Open in new tab
          </a>
          <a
            href={dummyQuiz.pdfLink}
            download
            className="inline-flex items-center gap-2 rounded-xl border px-3 py-2 text-sm hover:bg-gray-50"
          >
            Download PDF
          </a>
        </div>
      </div>

      {/* Layout: metadata | PDF */}
      <div className="grid grid-cols-1 lg:grid-cols-12 gap-6">
        {/* Metadata card */}
        <section className="lg:col-span-4">
          <div className="rounded-2xl border bg-white/60 backdrop-blur-sm shadow-sm p-5 space-y-4">
            <div className="grid grid-cols-2 gap-3 text-sm">
              <div>
                <p className="text-gray-500">Course</p>
                <p className="font-medium">{dummyQuiz.courseCode}</p>
              </div>
              <div>
                <p className="text-gray-500">Professor</p>
                <p className="font-medium">{dummyQuiz.professor}</p>
              </div>
              <div>
                <p className="text-gray-500">School</p>
                <p className="font-medium">{dummyQuiz.school}</p>
              </div>
              <div>
                <p className="text-gray-500">Term</p>
                <p className="font-medium">{dummyQuiz.term} {dummyQuiz.year}</p>
              </div>
              <div className="col-span-2">
                <p className="text-gray-500">Uploaded</p>
                <p className="font-medium">{new Date(dummyQuiz.createdAt).toLocaleString()}</p>
              </div>
            </div>

            {/* Tags */}
            <div>
              <p className="text-sm text-gray-500 mb-1">Tags</p>
              <div className="flex flex-wrap gap-2">
                {dummyQuiz.tags.map((t) => (
                  <span key={t} className="rounded-full border px-2.5 py-1 text-xs bg-gray-50">{t}</span>
                ))}
              </div>
            </div>

            {/* Description */}
            <div>
              <p className="text-sm text-gray-500 mb-1">Description</p>
              <p className="text-sm leading-relaxed text-gray-800">{dummyQuiz.description}</p>
            </div>

            {/* Actions */}
            <div className="flex flex-wrap gap-2 pt-2">
              <button type="button" className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50">
                ⭐ Save
              </button>
              <button type="button" className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50">
                ⚑ Report
              </button>
              <button type="button" className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50">
                🔗 Copy link
              </button>
            </div>
          </div>
        </section>

        {/* PDF viewer */}
        <section className="lg:col-span-8">
          <div className="rounded-2xl border overflow-hidden bg-white shadow-sm">
            <div className="relative w-full pt-[100%] sm:pt-[80%] md:pt-[70%] lg:pt-[65%]">
              <iframe
                className="absolute inset-0 h-full w-full"
                src={dummyQuiz.pdfLink}
                title="Quiz PDF Viewer"
                referrerPolicy="no-referrer"
              />
            </div>
          </div>
          <p className="text-xs text-gray-500 mt-3">
            Having trouble viewing? Try the “Open in new tab” button above or download the PDF.
          </p>
        </section>
      </div>
    </div>
  );
}


                                 {/* <Label

                                                htmlFor="filepick"
                                                onDrop={onDrop}
                                                onDragOver={(e) => e.preventDefault()}
                                                className="border-2 border-dashed border-gray-300 rounded-2xl p-8 bg-white/60 flex flex-col items-center justify-center text-center cursor-pointer hover:border-blue-400 hover:bg-blue-50/50 transition"
                                            >
                                                <Upload className="h-8 w-8 mb-2" />
                                                <p className="font-medium">Drag & drop files here</p>
                                                <p className="text-sm text-gray-600">or click to browse</p>
                                                <Input id="filepick" type="file" accept=".pdf,image/*" className="hidden" onChange={onPick} />
                                            </Label> */}


----
"use client";

import { motion } from "framer-motion";
import { BookOpen, GraduationCap, ShieldCheck, UploadCloud, Users, Github, HelpCircle, Search, Sparkles, HeartHandshake, FileText, Star } from "lucide-react";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

// Optional: customize these for your app
const GITHUB_URL = "https://github.com/"; // TODO: replace with your repo
const UPLOAD_PATH = "/upload"; // TODO: replace with your upload route

export default function FAQPage() {
  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-b from-blue-50 via-white to-blue-100">
      {/* Decorative blobs */}
      <div className="pointer-events-none absolute -top-24 -left-24 h-72 w-72 rounded-full bg-blue-200/40 blur-3xl" />
      <div className="pointer-events-none absolute -bottom-16 -right-20 h-72 w-72 rounded-full bg-indigo-200/40 blur-3xl" />

      <div className="relative mx-auto max-w-5xl px-6 py-20">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 12 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4 }}
          className="mb-10 text-center"
        >
          <div className="mb-3 inline-flex items-center gap-2 rounded-full border bg-white px-3 py-1 text-sm text-gray-600 shadow-sm">
            <HelpCircle className="h-4 w-4" />
            FAQ & About
          </div>
          <h1 className="text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl">QuizCrow</h1>
          <p className="mx-auto mt-3 max-w-2xl text-balance text-lg text-gray-700">
            A community library of past exams and study materials—built by students, for students.
          </p>
          <div className="mt-6 flex items-center justify-center gap-2">
            <Badge variant="secondary" className="gap-1"><Users className="h-3.5 w-3.5" /> Student‑run</Badge>
            <Badge variant="secondary" className="gap-1"><BookOpen className="h-3.5 w-3.5" /> Study‑first</Badge>
            <Badge variant="secondary" className="gap-1"><ShieldCheck className="h-3.5 w-3.5" /> Integrity‑aligned</Badge>
          </div>
        </motion.div>

        {/* About Cards */}
        <div className="mb-10 grid gap-6 sm:grid-cols-2">
          <Card className="shadow-sm">
            <CardHeader className="flex flex-row items-center gap-3 space-y-0">
              <div className="rounded-2xl bg-blue-100 p-2 text-blue-700">
                <GraduationCap className="h-5 w-5" />
              </div>
              <CardTitle className="text-xl">What is QuizCrow?</CardTitle>
            </CardHeader>
            <CardContent className="text-gray-700">
              QuizCrow is a <strong>crowdsourced</strong> repository of past quizzes, exams, and study notes. Browse by school, course, year, and professor, then practice with real question styles.
              <div className="mt-4 flex flex-wrap gap-2">
                <Badge className="gap-1" variant="outline"><Search className="h-3.5 w-3.5" /> Smart filters</Badge>
                <Badge className="gap-1" variant="outline"><FileText className="h-3.5 w-3.5" /> Real papers</Badge>
                <Badge className="gap-1" variant="outline"><Sparkles className="h-3.5 w-3.5" /> Better prep</Badge>
              </div>
            </CardContent>
          </Card>

          <Card className="shadow-sm">
            <CardHeader className="flex flex-row items-center gap-3 space-y-0">
              <div className="rounded-2xl bg-emerald-100 p-2 text-emerald-700">
                <ShieldCheck className="h-5 w-5" />
              </div>
              <CardTitle className="text-xl">Academic Integrity</CardTitle>
            </CardHeader>
            <CardContent className="text-gray-700">
              We support and respect academic integrity. QuizCrow is a <strong>study aid</strong>—not a cheating tool. Use materials responsibly and follow your institution’s policies.
              <ul className="mt-3 list-inside list-disc space-y-1 text-sm text-gray-600">
                <li>Learn formats & recurring concepts.</li>
                <li>Practice under exam‑like constraints.</li>
                <li>Never submit others’ work as your own.</li>
              </ul>
            </CardContent>
          </Card>
        </div>

        {/* Contribute CTA */}
        <Card className="mb-12 border-blue-200/60 bg-gradient-to-br from-white to-blue-50 shadow-sm">
          <CardHeader className="space-y-1">
            <div className="inline-flex items-center gap-2 rounded-full border bg-white px-2.5 py-1 text-xs text-gray-600">
              <HeartHandshake className="h-3.5 w-3.5" /> Community powered
            </div>
            <CardTitle className="text-2xl">Contribute to the library</CardTitle>
          </CardHeader>
          <CardContent className="flex flex-col items-start justify-between gap-4 sm:flex-row sm:items-center">
            <p className="max-w-2xl text-gray-700">
              Upload past papers you’re allowed to share, or help improve the platform. Every contribution helps students prepare better.
            </p>
            <div className="flex gap-2">
              <Button asChild className="gap-2">
                <a href={UPLOAD_PATH}><UploadCloud className="h-4 w-4" /> Upload a paper</a>
              </Button>
              <Button asChild variant="outline" className="gap-2">
                <a href={GITHUB_URL} target="_blank" rel="noreferrer"><Github className="h-4 w-4" /> Open source</a>
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* FAQ */}
        <div className="mb-14">
          <div className="mb-4 flex items-center gap-2">
            <HelpCircle className="h-5 w-5 text-blue-600" />
            <h2 className="text-2xl font-semibold text-gray-900">Frequently Asked Questions</h2>
          </div>

          <Accordion type="single" collapsible className="divide-y rounded-xl border bg-white">
            <AccordionItem value="q1" className="px-4">
              <AccordionTrigger className="text-left text-base font-medium text-gray-900">
                Is using QuizCrow considered cheating?
              </AccordionTrigger>
              <AccordionContent className="text-gray-700">
                No. QuizCrow is built to <strong>support academic integrity</strong>. It helps you study by reviewing past papers and understanding question styles. Always follow your school’s policies.
              </AccordionContent>
            </AccordionItem>

            <AccordionItem value="q2" className="px-4">
              <AccordionTrigger className="text-left text-base font-medium text-gray-900">
                Where do the quizzes and exams come from?
              </AccordionTrigger>
              <AccordionContent className="text-gray-700">
                The library is <strong>crowdsourced</strong>. Students and community members upload past quizzes and exams to share—together we build a helpful, growing archive.
              </AccordionContent>
            </AccordionItem>

            <AccordionItem value="q3" className="px-4">
              <AccordionTrigger className="text-left text-base font-medium text-gray-900">
                Do I have to pay to access quizzes?
              </AccordionTrigger>
              <AccordionContent className="text-gray-700">
                No. QuizCrow is free. Our mission is to keep study resources accessible to everyone, regardless of financial background.
              </AccordionContent>
            </AccordionItem>

            <AccordionItem value="q4" className="px-4">
              <AccordionTrigger className="text-left text-base font-medium text-gray-900">
                Can I contribute to QuizCrow?
              </AccordionTrigger>
              <AccordionContent className="space-y-3 text-gray-700">
                <p>
                  Absolutely. Upload quizzes, exams, or study notes you’re allowed to share (respecting integrity and fair‑use guidelines). Your uploads help other students succeed.
                </p>
                <div className="flex flex-wrap gap-2">
                  <Button asChild size="sm" className="gap-2"><a href={UPLOAD_PATH}><UploadCloud className="h-4 w-4" /> Upload</a></Button>
                  <Button asChild size="sm" variant="outline" className="gap-2"><a href={GITHUB_URL} target="_blank" rel="noreferrer"><Github className="h-4 w-4" /> Contribute on GitHub</a></Button>
                </div>
              </AccordionContent>
            </AccordionItem>

            <AccordionItem value="q5" className="px-4">
              <AccordionTrigger className="text-left text-base font-medium text-gray-900">
                How do I get started?
              </AccordionTrigger>
              <AccordionContent className="text-gray-700">
                Use filters on the Browse page to find a course, professor, and year range. Open a result to view details—or submit a request if a paper isn’t listed yet.
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>

        {/* Footer CTA */}
        <Card className="border-blue-200/60 bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-md">
          <CardContent className="flex flex-col items-start justify-between gap-4 p-6 sm:flex-row sm:items-center">
            <div>
              <h3 className="text-xl font-semibold">Ready to power up your prep?</h3>
              <p className="mt-1 text-blue-100">Search past papers, learn the patterns, and study smarter.</p>
            </div>
            <div className="flex gap-2">
              <Button asChild variant="secondary" className="gap-2">
                <a href="/browse"><Search className="h-4 w-4" /> Browse papers</a>
              </Button>
              <Button asChild variant="outline" className="border-white/40 text-white hover:bg-white/10">
                <a href={GITHUB_URL} target="_blank" rel="noreferrer"><Star className="mr-2 h-4 w-4" /> Star on GitHub</a>
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  
}


"use client";

import { useState } from "react";
import { motion } from "framer-motion";
import { Upload, FileText, Trash2, Plus, CheckCircle2, AlertCircle, School, BookOpen, User, CalendarClock, Tags } from "lucide-react";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import UploadQuizForm from "@/custom_components/UploadQuizForm";


const DEFAULT_TAGS = [
  "midterm", "final", "multiple-choice", "short-answer", "calculus", "cs101", "physics", "intro"
];

// Dummy recent uploads
const RECENT_UPLOADS = [
  { id: "QZ-1024", title: "CSCI 127 Midterm (Fall 2023)", course: "CSCI 127", school: "CCNY", files: 1, status: "Approved" },
  { id: "QZ-1023", title: "MATH 201 Final (Spring 2024)", course: "MATH 201", school: "CCNY", files: 2, status: "Pending" },
  { id: "QZ-1022", title: "PHYS 208 Quiz 3 (Fall 2022)", course: "PHYS 208", school: "CCNY", files: 1, status: "Approved" },
];

export default function UploadQuizPage() {



    // const createQuizFormSchema = z.object({
        
    // })

    const [files, setFiles] = useState<File[]>([
    // pre-populate with a dummy File-like object for UI only
  ]);
  const [tags, setTags] = useState<string[]>(["midterm", "cs101"]);
  const [submitted, setSubmitted] = useState<null | { title: string }>(null);

  function onDrop(ev: React.DragEvent<HTMLLabelElement>) {
    ev.preventDefault();
    const list = Array.from(ev.dataTransfer.files || []);
    if (list.length) setFiles((prev) => [...prev, ...list]);
  }

  function onPick(ev: React.ChangeEvent<HTMLInputElement>) {
    const list = Array.from(ev.target.files || []);
    if (list.length) setFiles((prev) => [...prev, ...list]);
  }

  function removeFile(idx: number) {
    setFiles((prev) => prev.filter((_, i) => i !== idx));
  }

  function toggleTag(t: string) {
    setTags((prev) => (prev.includes(t) ? prev.filter((x) => x !== t) : [...prev, t]));
  }

  function submitFake(ev: React.FormEvent) {
    ev.preventDefault();
    const form = new FormData(ev.currentTarget as HTMLFormElement);
    const title = `${form.get("course") || "COURSE"} ${form.get("examType") || "Exam"} (${form.get("term") || "Term"} ${form.get("year") || "Year"})`;
    setSubmitted({ title });
    // no real network — UI only
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-blue-100 px-6 pt-28">
      <div className="max-w-6xl mx-auto space-y-8">

        {/* header */}
        <motion.div 
        initial={{ opacity: 0, y: 8 }} 
        animate={{ opacity: 1, y: 0 }} 
        transition={{ duration: 0.3 }}
        >
          <h1 className="text-3xl md:text-4xl font-bold text-gray-900">Upload a New Quiz</h1>
          <p className="text-gray-600 mt-1">Add past quizzes or exams to help the community study.</p>
        </motion.div>

        {/* Success / Info Banner */}
        {submitted && (
          <Card className="border-emerald-200 bg-emerald-50/60">
            <CardContent className="py-4 flex items-start gap-3">
              <CheckCircle2 className="h-5 w-5 text-emerald-600 mt-0.5" />
              <div>
                <p className="font-medium text-emerald-900">Pretend submit successful!</p>
                <p className="text-emerald-800/80 text-sm">“{submitted.title}” would be queued for review. (This is just a demo state.)</p>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Form & Sidebar */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">

          {/* Form */}
          <UploadQuizForm></UploadQuizForm>
          
          {/* Sidebar */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Guidelines</CardTitle>
              </CardHeader>
              <CardContent className="text-sm text-gray-700 space-y-2">
                <p>• Prefer <strong>PDF</strong> or clear images (JPG/PNG).</p>
                <p>• No copyrighted material that you don’t have permission to share.</p>
                <p>• Add descriptive tags so others can find this easily.</p>
                <p>• This page is <em>UI-only</em>. Hook it to your API when ready.</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Recent uploads (demo)</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {RECENT_UPLOADS.map((u) => (
                  <div key={u.id} className="rounded-xl border bg-white p-3">
                    <div className="flex items-center justify-between">
                      <p className="font-medium truncate">{u.title}</p>
                      <Badge variant={u.status === "Approved" ? "default" : "secondary"}>{u.status}</Badge>
                    </div>
                    <div className="flex gap-3 text-xs text-gray-600 mt-1">
                      <span>{u.course}</span>
                      <span>• {u.school}</span>
                      <span>• {u.files} file{u.files > 1 ? "s" : ""}</span>
                    </div>
                  </div>
                ))}
                <Button variant="outline" className="w-full mt-1"><Plus className="h-4 w-4 mr-1"/>View all</Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
-----
"use client";

import { client } from "@/utils/supabaseClient";
import { Quiz, QuizTag } from "@/utils/types";
import { PostgrestSingleResponse } from "@supabase/supabase-js";
import { useEffect, useState } from "react";
import { toast } from "sonner";

interface QuizDetailPageProps {
  params: Promise<{ quizId: string }>
}

type QuizToTags = {
  id: number,
  createdAt: string,
  quizId: number,
  tagId: number
}

export default function QuizDetailPage({ params }: QuizDetailPageProps) {

  const [quiz, setQuiz] = useState<Quiz>()
  const [quizTags, setQuizTags] = useState<QuizTag[]>([])
  let allTags: QuizTag[] = []

  // This function fetches the tags assocaited with the quiz
  async function fetchQuizTags(quizToTags: QuizToTags[]) {
    for (let i = 0; i < quizToTags.length; i++) {
      const fetchQuizTagResponse: PostgrestSingleResponse<any> = await client.from("quizTag").select("*").eq("id", quizToTags[i].tagId).single()
      if (fetchQuizTagResponse.error) {
        toast.error("Failed fetching one of the quiz tags.")
      }
      else {
        if (fetchQuizTagResponse.data) {
          allTags.push(fetchQuizTagResponse.data as QuizTag)
        }
      }
    }
    setQuizTags(allTags)
  }

  // This function fetches the quiz tags associated with a quiz
  // First its it retrieves the associations between the quiz and the tags, then it retrives the tags that match the assocaitions
  async function fetchQuizTagIds() {
    const paramsValue = await params
    const quizId: number = Number(paramsValue.quizId)
    const fetchQuizToTagsResponse: PostgrestSingleResponse<any[]> = await client.from("quizToTags").select("*").eq("quizId", quizId)
    if (fetchQuizToTagsResponse.error) {
      toast.error("Failed to retrieve tags associated with this quiz.")
    }
    else {
      if (fetchQuizToTagsResponse.data) {
        const fetchedQuizTagIds: QuizToTags[] = fetchQuizToTagsResponse.data as QuizToTags[]
        await fetchQuizTags(fetchedQuizTagIds)
      }
    }
  }

  // This function retrievs the quiz
  async function fetchQuiz() {
    const paramsValue = await params
    const quizId: number = Number(paramsValue.quizId)

    const fetchQuizResponse: PostgrestSingleResponse<null> = await client.from("quiz").select("*").eq("id", quizId).single()
    if (fetchQuizResponse.error) {
      toast.error("There was an error. Please try again later.")
    }
    else {
      if (fetchQuizResponse.data) {
        const fetchedQuiz = fetchQuizResponse.data as Quiz
        setQuiz(fetchedQuiz)
        await fetchQuizTagIds()
      }
    }
  }

  useEffect(() => {
    fetchQuiz()
  }, [params])


  return (
    <div className="min-h-dvh w-full px-4 sm:px-6 lg:px-8 py-6 bg-gradient-to-b from-blue-50 to-blue-100 pt-28">

      {/* header */}
      {quiz ? (
        <>
          <div className="mb-4">
            <div className="text-sm text-gray-500 flex items-center gap-2">
              <a href="/" className="hover:underline">Home</a>
              <span>/</span>
              <a href="/browse" className="hover:underline">Browse</a>
              <span>/</span>
              <a href="/" className="hover:underline">Results</a>
              <span>/</span>
              <span className="text-gray-700 font-medium">{quiz.title}</span>
            </div>
          </div>

          {/* title + actions */}
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-3 mb-4">
            <h1 className="text-2xl md:text-3xl font-semibold tracking-tight">
              {quiz.title}
            </h1>
            <div className="flex items-center gap-2">
              <a
                href={quiz.quizFileLink}
                target="_blank"
                rel="noreferrer"
                className="inline-flex items-center gap-2 rounded-xl border px-3 py-2 text-sm hover:bg-gray-50"
              >
                Open in new tab
              </a>
              <a
                href={quiz.quizFileLink}
                download
                className="inline-flex items-center gap-2 rounded-xl border px-3 py-2 text-sm hover:bg-gray-50"
              >
                Download PDF
              </a>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-12 gap-6">
            {/* Metadata card */}
            <section className="lg:col-span-4">
              <div className="rounded-2xl border bg-white/60 backdrop-blur-sm shadow-sm p-5 space-y-4">
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div>
                    <p className="text-gray-500">Course</p>
                    <p className="font-medium">{quiz.courseCode}</p>
                  </div>
                  <div>
                    <p className="text-gray-500">Professor</p>
                    <p className="font-medium">{quiz.professor}</p>
                  </div>
                  <div>
                    <p className="text-gray-500">School</p>
                    <p className="font-medium">{quiz.school}</p>
                  </div>
                  <div>
                    <p className="text-gray-500">Term</p>
                    <p className="font-medium">{quiz.semester} {quiz.year}</p>
                  </div>
                  <div className="col-span-2">
                    <p className="text-gray-500">Uploaded</p>
                    <p className="font-medium">{new Date(quiz.createdAt!).toLocaleString()}</p>
                  </div>
                </div>

                {/* Tags */}
                {quizTags &&

                  <div>
                    <p className="text-sm text-gray-500 mb-1">Tags</p>
                    <div className="flex flex-wrap gap-2">
                      {quizTags.map((quizTag: QuizTag, index) => (
                        <span key={index} className="rounded-full border px-2.5 py-1 text-xs bg-gray-50">{quizTag.name}</span>
                      ))}
                    </div>
                  </div>
                }

                {/* Description */}
                <div>
                  <p className="text-sm text-gray-500 mb-1">Description</p>
                  <p className="text-sm leading-relaxed text-gray-800">{quiz.description}</p>
                </div>

                {/* Fix this later. Needs User Auth to be implemented. V0 has no user auth*/}
                {/* Actions */}
                {/* <div className="flex flex-wrap gap-2 pt-2">
                <button type="button" className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50">
                  ⭐ Save
                </button>
                <button type="button" className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50">
                  ⚑ Report
                </button>
                <button type="button" className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50">
                  🔗 Copy link
                </button>
              </div> */}
              
              </div>
            </section>

            {/* PDF viewer */}
            <section className="lg:col-span-8">
              <div className="rounded-2xl border overflow-hidden bg-white shadow-sm">
                <div className="relative w-full pt-[100%] sm:pt-[80%] md:pt-[70%] lg:pt-[65%]">
                  {quiz.quizFileLink ?
                    <iframe
                      className="absolute inset-0 h-full w-full"
                      src={quiz.quizFileLink ? quiz.quizFileLink : "https://example.com/sample.pdf"}
                      title="Quiz PDF Viewer"
                      referrerPolicy="no-referrer"
                    />
                    :
                    <div className="absolute inset-0 grid place-items-center">
                      <div className="max-w-md rounded-xl border border-indigo-200 bg-indigo-50 px-6 py-4 shadow-sm text-center">
                        <p className="text-base font-medium text-indigo-800">PDF unavailable</p>
                        <p className="mt-1 text-sm text-indigo-600">
                          There was an error retrieving this quiz file. Please try again later.
                        </p>
                      </div>
                    </div>
                  }

                </div>
              </div>
              <p className="text-xs text-gray-500 mt-3">
                Having trouble viewing? Try the “Open in new tab” button above or download the PDF.
              </p>
            </section>
          </div>
        </>
      ) : (
        <div></div>
      )}
    </div>
  );

}